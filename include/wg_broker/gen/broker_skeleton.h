/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __BROKER_SKELETON_H__
#define __BROKER_SKELETON_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for ussur.wg.Broker */

#define TYPE_BROKER (broker_get_type ())
#define BROKER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_BROKER, Broker))
#define IS_BROKER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_BROKER))
#define BROKER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_BROKER, BrokerIface))

struct _Broker;
typedef struct _Broker Broker;
typedef struct _BrokerIface BrokerIface;

struct _BrokerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_profiles) (
    Broker *object,
    GDBusMethodInvocation *invocation);

};

GType broker_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *broker_interface_info (void);
guint broker_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void broker_complete_get_profiles (
    Broker *object,
    GDBusMethodInvocation *invocation,
    GVariant *profiles);



/* D-Bus method calls: */
void broker_call_get_profiles (
    Broker *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean broker_call_get_profiles_finish (
    Broker *proxy,
    GVariant **out_profiles,
    GAsyncResult *res,
    GError **error);

gboolean broker_call_get_profiles_sync (
    Broker *proxy,
    GVariant **out_profiles,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_BROKER_PROXY (broker_proxy_get_type ())
#define BROKER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_BROKER_PROXY, BrokerProxy))
#define BROKER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_BROKER_PROXY, BrokerProxyClass))
#define BROKER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_BROKER_PROXY, BrokerProxyClass))
#define IS_BROKER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_BROKER_PROXY))
#define IS_BROKER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_BROKER_PROXY))

typedef struct _BrokerProxy BrokerProxy;
typedef struct _BrokerProxyClass BrokerProxyClass;
typedef struct _BrokerProxyPrivate BrokerProxyPrivate;

struct _BrokerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BrokerProxyPrivate *priv;
};

struct _BrokerProxyClass
{
  GDBusProxyClass parent_class;
};

GType broker_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BrokerProxy, g_object_unref)
#endif

void broker_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Broker *broker_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Broker *broker_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void broker_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Broker *broker_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Broker *broker_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_BROKER_SKELETON (broker_skeleton_get_type ())
#define BROKER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_BROKER_SKELETON, BrokerSkeleton))
#define BROKER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_BROKER_SKELETON, BrokerSkeletonClass))
#define BROKER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_BROKER_SKELETON, BrokerSkeletonClass))
#define IS_BROKER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_BROKER_SKELETON))
#define IS_BROKER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_BROKER_SKELETON))

typedef struct _BrokerSkeleton BrokerSkeleton;
typedef struct _BrokerSkeletonClass BrokerSkeletonClass;
typedef struct _BrokerSkeletonPrivate BrokerSkeletonPrivate;

struct _BrokerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BrokerSkeletonPrivate *priv;
};

struct _BrokerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType broker_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BrokerSkeleton, g_object_unref)
#endif

Broker *broker_skeleton_new (void);


G_END_DECLS

#endif /* __BROKER_SKELETON_H__ */
